=====================================================
EVERY DAY COMMAND NM SCRIPTS
=====================================================
Manual linting:  npm run lint
Watched linting: npm run lint:watch  (runs on every save)

Also main start does a lot of parallel actions
npm start (See main buildScripts folder)
=====================================================
GETTING STARTED REQUIREMENTS:
=====================================================
1. Install Git
2. Install Node 4 or greater (5 or greater recommended for optimum performance)
3. Run ‘npm install’ in the root folder of each project.
=====================================================

1. Stage all the files you changed
git add .

2. Commit your changes locally
git commit -m “added new feature”

3. Push your work to Github
git push

4. Get the status of working folder at any time.
   modified should be commited the pushed.
git status

5.  From in working dir. pull down commited
git pull

10. git documentation online
https://git-scm.com/doc

=====================================================
VISUAL STUDIO CODE EXTENSIONS TO ADD
=====================================================
EditorConfig for VS Code
Sublime Babel

VSCODE Extensions Commands:
code --list-extensions
code --install-extension {extension id}
code --uninstall-extension {extension id}
code --disable-extensions

=====================================================
My GitHub and Gist:
https://github.com/RonGarlit
=====================================================
GitHub Friendly's:
=====================================================
Cory House examples:
https://github.com/coryhouse
https://github.com/coryhouse/javascript-development-environment
https://www.bitnative.com/

Cory's Base NPM Package JSON file.
https://gist.github.com/coryhouse/29bd1029b623beb4c7f79b748dcba844


Others to follow on GitHub and Gist:
https://github.com/viatsko/awesome-vscode

https://gist.github.com/nickytonline/3d5ffeab871a6662d7a3f89bb0bed0f8

=====================================================
NODE SECURITY PROJECT - NSP
=====================================================
Instal globally:  npm install -g nsp

Manual check:  nsp check

=====================================================
Create build script srcServer.js


=====================================================
WEB SERVER: Express in Node
=====================================================

Configue express in srcServer.js buildscript
import express from 'express';
import path from 'path';
import open from 'open';

const port = 3000;
const app = express();

app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, '../src/index.html'));
});

app.listen(port, function(err) {
  if (err) {
    console.log(err);
  } else {
    open('http://localhost:' + port);
  }
});
=====================================================

Also you can use local tunnel to show external in browser.
Setup:
1.  npminstall localtunnel-g
2.  Start your app
3.  lt--port 3000
=====================================================

Run it using: node buildscripts/srcServer.js
=====================================================
NPM STUFF
=====================================================
Setup web server in the srcServer.js file

node buildScripts/srcServer.js
*****************************************************
Documentation for NPM Scripts:
https://docs.npmjs.com/misc/scripts

npm-run-all --parallel
is used to run multiple tasks together in start npm script.
https://www.npmjs.com/package/npm-run-all
https://github.com/mysticatea/npm-run-all
https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md


=====================================================
To Run Main START Script:
Full output
npm start
Silent output
npm start -s

*** Decided to use NPM Script to avoid extra layers of abstraction you get with Grunt and Gulp.
=====================================================
FINAL VERSON OF MY NPM SCRIPTS
=====================================================
Defer to these NPM Automation Scripts:
  "scripts": {
    "prestart": "babel-node buildScripts/startMessage.js",
    "start": "npm-run-all --parallel security-check open:src lint:watch test:watch start-mockapi",
    "open:src": "babel-node buildScripts/srcServer.js",
    "lint": "esw webpack.config.* src buildScripts --color",
    "lint:watch": "npm run lint -- --watch",
    "security-check": "nsp check",
    "localtunnel": "lt --port 3000",
    "share": "npm-run-all --parallel open:src localtunnel",
    "test": "mocha --reporter progress buildScripts/testSetup.js \"src/**/*.test.js\"",
    "test:watch": "npm run test -- --watch",
    "generate-mock-data": "babel-node buildScripts/generateMockData",
    "prestart-mockapi": "npm run generate-mock-data",
    "start-mockapi": "json-server --watch src/api/db.json --port 3001",
    "clean-dist": "rimraf ./dist && mkdir dist",
    "prebuild": "npm-run-all clean-dist test lint",
    "build": "babel-node buildScripts/build.js",
    "postbuild": "babel-node buildScripts/distServer.js",
    "deploy": "surge ./dist"
  },

Read about NPM versus Gulp at: https://medium.freecodecamp.org/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8

=====================================================
USING CHALK:
Terminal string styling done right!!
=====================================================
https://www.npmjs.com/package/chalk
https://github.com/chalk/chalk

=====================================================
TRANSPILING/TRANSPILERS
=====================================================
Babel is a compiler for writing next generation JavaScript.
https://babeljs.io/
https://github.com/babel/babel

=====================================================
BUNDLING
=====================================================
Choice is to use WebPack:  https://webpack.js.org/
https://webpack.github.io/

=====================================================
LINTING
=====================================================
https://eslint.org/
https://eslint.org/docs/user-guide/getting-started
https://github.com/eslint/eslint

A list of awesome ESLint plugins, configs, etc
https://github.com/dustinspecker/awesome-eslint
https://github.com/dustinspecker/

eslintwatch npm package
https://www.npmjs.com/package/eslint-watch

To disable linting at line level
// eslint-disable-line no-console
To disable linting in file
/* eslint-disable no-console */


=====================================================
TESTING
=====================================================
KEEP TEST FILES ALONGSIDE SOURCE FILES
NOT CENTRALIZED METHOD.  CLEAN TEST IN
BUILD SCRIPT IN WebPack. COLOCATION TESTING.
=====================================================
Unit Testing Toolset
Framework: mocha
https://mochajs.org/

Assertion Library: chai
http://www.chaijs.com/

Helper Library: jsdom
HTML and browser tests
https://github.com/jsdom/jsdom
https://www.npmjs.com/package/node-jsdom

Helper Library: cheerio
JQuery selector like for server tests
https://cheerio.js.org/
https://github.com/cheeriojs/cheerio

*** Might need to look at this at somw point
Headless browser: phantomjs
http://phantomjs.org/
http://phantomjs.org/documentation/
https://scotch.io/tutorials/what-is-phantomjs-and-how-is-it-used
Also JSDOM can cover this.

=====================================================
CONTINOUS INTERGRATION
=====================================================
Linux Based: travis ci
https://travis-ci.org/
https://travis-ci.com/
https://github.com/marketplace/travis-ci/plan/MDIyOk1hcmtldHBsYWNlTGlzdGluZ1BsYW43MA==#pricing-and-setup

Windows Based:  appveyor ci
https://www.appveyor.com/
https://www.appveyor.com/docs/build-environment/
https://github.com/marketplace/appveyor

=====================================================
HTTP CALLS
=====================================================
(Browser Only) --------------------------------------
FETCH ****** Future proof when it is done.
Newest is FETCH still being built out, get the latest
info here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
https://github.com/github/fetch
https://developers.google.com/web/updates/2015/03/introduction-to-fetch
https://github.github.io/fetch/

=====================================================
(Node Specific) -------------------------------------
HTTP
https://nodejs.org/api/http.html
https://www.w3schools.com/nodejs/nodejs_http.asp
https://davidwalsh.name/nodejs-http-request

REQUEST ****** Best if your node only
https://www.npmjs.com/package/request
http://stackabuse.com/the-node-js-request-module/

XMLHTTPREQUEST
https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
https://www.w3schools.com/xml/xml_http.asp

=====================================================
ISOMORPHIC-FETCH  (Node & Browser) -----------------
https://www.npmjs.com/package/isomorphic-fetch
https://github.com/matthew-andrews/isomorphic-fetch

AXIOS ****** Nice if you must be in both Node & Browser
https://www.npmjs.com/package/axios
http://codeheaven.io/how-to-use-axios-as-your-http-client/


SUPERAGENT
https://github.com/visionmedia/superagent
https://visionmedia.github.io/superagent/
https://www.npmjs.com/package/superagent

*****************************************************
**** PLAN TO CENTRALIZE API CALLS *******************
*****************************************************


=====================================================
SUBJECT
=====================================================
=====================================================
SUBJECT
=====================================================
